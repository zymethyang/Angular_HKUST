(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("@angular/core"), require("@angular/http"), require("lodash/isArray"), require("lodash/includes"), require("lodash/isUndefined"), require("lodash/isFunction"), require("lodash/defaults"), require("lodash/each"), require("lodash/extend"), require("lodash/has"), require("lodash/initial"), require("lodash/clone"), require("lodash/isNull"), require("lodash/map"), require("lodash/isBoolean"), require("lodash/keys"), require("lodash/reduce"), require("lodash/forEach"), require("lodash/isObject"), require("lodash/bind"), require("lodash/union"), require("lodash/values"), require("lodash/pick"), require("lodash/every"), require("lodash/get"), require("lodash/omit"), require("lodash/find"), require("lodash/last"), require("lodash/isEmpty"), require("lodash/isNumber"), require("rxjs"));
	else if(typeof define === 'function' && define.amd)
		define(["@angular/core", "@angular/http", "lodash/isArray", "lodash/includes", "lodash/isUndefined", "lodash/isFunction", "lodash/defaults", "lodash/each", "lodash/extend", "lodash/has", "lodash/initial", "lodash/clone", "lodash/isNull", "lodash/map", "lodash/isBoolean", "lodash/keys", "lodash/reduce", "lodash/forEach", "lodash/isObject", "lodash/bind", "lodash/union", "lodash/values", "lodash/pick", "lodash/every", "lodash/get", "lodash/omit", "lodash/find", "lodash/last", "lodash/isEmpty", "lodash/isNumber", "rxjs"], factory);
	else if(typeof exports === 'object')
		exports["ngx-restangular"] = factory(require("@angular/core"), require("@angular/http"), require("lodash/isArray"), require("lodash/includes"), require("lodash/isUndefined"), require("lodash/isFunction"), require("lodash/defaults"), require("lodash/each"), require("lodash/extend"), require("lodash/has"), require("lodash/initial"), require("lodash/clone"), require("lodash/isNull"), require("lodash/map"), require("lodash/isBoolean"), require("lodash/keys"), require("lodash/reduce"), require("lodash/forEach"), require("lodash/isObject"), require("lodash/bind"), require("lodash/union"), require("lodash/values"), require("lodash/pick"), require("lodash/every"), require("lodash/get"), require("lodash/omit"), require("lodash/find"), require("lodash/last"), require("lodash/isEmpty"), require("lodash/isNumber"), require("rxjs"));
	else
		root["ngx-restangular"] = factory(root["@angular/core"], root["@angular/http"], root["lodash/isArray"], root["lodash/includes"], root["lodash/isUndefined"], root["lodash/isFunction"], root["lodash/defaults"], root["lodash/each"], root["lodash/extend"], root["lodash/has"], root["lodash/initial"], root["lodash/clone"], root["lodash/isNull"], root["lodash/map"], root["lodash/isBoolean"], root["lodash/keys"], root["lodash/reduce"], root["lodash/forEach"], root["lodash/isObject"], root["lodash/bind"], root["lodash/union"], root["lodash/values"], root["lodash/pick"], root["lodash/every"], root["lodash/get"], root["lodash/omit"], root["lodash/find"], root["lodash/last"], root["lodash/isEmpty"], root["lodash/isNumber"], root["rxjs"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_15__, __WEBPACK_EXTERNAL_MODULE_16__, __WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_18__, __WEBPACK_EXTERNAL_MODULE_19__, __WEBPACK_EXTERNAL_MODULE_20__, __WEBPACK_EXTERNAL_MODULE_21__, __WEBPACK_EXTERNAL_MODULE_22__, __WEBPACK_EXTERNAL_MODULE_23__, __WEBPACK_EXTERNAL_MODULE_24__, __WEBPACK_EXTERNAL_MODULE_25__, __WEBPACK_EXTERNAL_MODULE_26__, __WEBPACK_EXTERNAL_MODULE_27__, __WEBPACK_EXTERNAL_MODULE_28__, __WEBPACK_EXTERNAL_MODULE_29__, __WEBPACK_EXTERNAL_MODULE_30__, __WEBPACK_EXTERNAL_MODULE_31__, __WEBPACK_EXTERNAL_MODULE_32__, __WEBPACK_EXTERNAL_MODULE_33__, __WEBPACK_EXTERNAL_MODULE_35__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ngx_restangular_module_1 = __webpack_require__(1);
	exports.RestangularModule = ngx_restangular_module_1.RestangularModule;
	var ngx_restangular_1 = __webpack_require__(34);
	exports.Restangular = ngx_restangular_1.Restangular;
	var ngx_restangular_http_1 = __webpack_require__(36);
	exports.RestangularHttp = ngx_restangular_http_1.RestangularHttp;


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	/* tslint:disable:member-ordering no-unused-variable */
	var core_1 = __webpack_require__(2);
	var http_1 = __webpack_require__(3);
	var ngx_restangular_config_1 = __webpack_require__(4);
	var ngx_restangular_1 = __webpack_require__(34);
	var ngx_restangular_http_1 = __webpack_require__(36);
	exports.CONFIG_OBJ = new core_1.InjectionToken('configObj');
	var RestangularModule = RestangularModule_1 = (function () {
	    function RestangularModule(parentModule) {
	        if (parentModule) {
	            throw new Error('RestangularModule is already loaded. Import it in the AppModule only');
	        }
	    }
	    RestangularModule.forRoot = function (config1, config2) {
	        return {
	            ngModule: RestangularModule_1,
	            providers: [
	                { provide: exports.CONFIG_OBJ, useValue: [config1, config2] },
	                { provide: ngx_restangular_config_1.RESTANGULAR, useFactory: ngx_restangular_config_1.RestangularFactory, deps: [exports.CONFIG_OBJ] },
	            ]
	        };
	    };
	    return RestangularModule;
	}());
	RestangularModule = RestangularModule_1 = __decorate([
	    core_1.NgModule({
	        imports: [http_1.HttpModule],
	        providers: [ngx_restangular_http_1.RestangularHttp, ngx_restangular_1.Restangular]
	    }),
	    __param(0, core_1.Optional()), __param(0, core_1.SkipSelf()),
	    __metadata("design:paramtypes", [RestangularModule])
	], RestangularModule);
	exports.RestangularModule = RestangularModule;
	var RestangularModule_1;


/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = require("@angular/core");

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = require("@angular/http");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(2);
	var lodash_1 = __webpack_require__(5);
	exports.RESTANGULAR = new core_1.InjectionToken('restangularWithConfig');
	function RestangularFactory(config) {
	    var configObj = {
	        fn: config[0],
	        arrServices: [],
	    };
	    if (lodash_1.default.isArray(config[0])) {
	        configObj = {
	            arrServices: config[0],
	            fn: config[1]
	        };
	    }
	    return configObj;
	}
	exports.RestangularFactory = RestangularFactory;


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var isArray = __webpack_require__(6);
	var includes = __webpack_require__(7);
	var isUndefined = __webpack_require__(8);
	var isFunction = __webpack_require__(9);
	var defaults = __webpack_require__(10);
	var each = __webpack_require__(11);
	var extend = __webpack_require__(12);
	var has = __webpack_require__(13);
	var initial = __webpack_require__(14);
	var clone = __webpack_require__(15);
	var isNull = __webpack_require__(16);
	var map = __webpack_require__(17);
	var isBoolean = __webpack_require__(18);
	var keys = __webpack_require__(19);
	var reduce = __webpack_require__(20);
	var forEach = __webpack_require__(21);
	var isObject = __webpack_require__(22);
	var bind = __webpack_require__(23);
	var union = __webpack_require__(24);
	var values = __webpack_require__(25);
	var pick = __webpack_require__(26);
	var every = __webpack_require__(27);
	var get = __webpack_require__(28);
	var omit = __webpack_require__(29);
	var find = __webpack_require__(30);
	var last = __webpack_require__(31);
	var isEmpty = __webpack_require__(32);
	var isNumber = __webpack_require__(33);
	exports.default = {
	    isArray: isArray,
	    includes: includes,
	    isUndefined: isUndefined,
	    isFunction: isFunction,
	    defaults: defaults,
	    each: each,
	    extend: extend,
	    has: has,
	    initial: initial,
	    clone: clone,
	    isNull: isNull,
	    map: map,
	    isBoolean: isBoolean,
	    keys: keys,
	    reduce: reduce,
	    forEach: forEach,
	    isObject: isObject,
	    bind: bind,
	    union: union,
	    values: values,
	    pick: pick,
	    every: every,
	    get: get,
	    omit: omit,
	    find: find,
	    last: last,
	    isEmpty: isEmpty,
	    isNumber: isNumber
	};


/***/ },
/* 6 */
/***/ function(module, exports) {

	module.exports = require("lodash/isArray");

/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = require("lodash/includes");

/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = require("lodash/isUndefined");

/***/ },
/* 9 */
/***/ function(module, exports) {

	module.exports = require("lodash/isFunction");

/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = require("lodash/defaults");

/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = require("lodash/each");

/***/ },
/* 12 */
/***/ function(module, exports) {

	module.exports = require("lodash/extend");

/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = require("lodash/has");

/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = require("lodash/initial");

/***/ },
/* 15 */
/***/ function(module, exports) {

	module.exports = require("lodash/clone");

/***/ },
/* 16 */
/***/ function(module, exports) {

	module.exports = require("lodash/isNull");

/***/ },
/* 17 */
/***/ function(module, exports) {

	module.exports = require("lodash/map");

/***/ },
/* 18 */
/***/ function(module, exports) {

	module.exports = require("lodash/isBoolean");

/***/ },
/* 19 */
/***/ function(module, exports) {

	module.exports = require("lodash/keys");

/***/ },
/* 20 */
/***/ function(module, exports) {

	module.exports = require("lodash/reduce");

/***/ },
/* 21 */
/***/ function(module, exports) {

	module.exports = require("lodash/forEach");

/***/ },
/* 22 */
/***/ function(module, exports) {

	module.exports = require("lodash/isObject");

/***/ },
/* 23 */
/***/ function(module, exports) {

	module.exports = require("lodash/bind");

/***/ },
/* 24 */
/***/ function(module, exports) {

	module.exports = require("lodash/union");

/***/ },
/* 25 */
/***/ function(module, exports) {

	module.exports = require("lodash/values");

/***/ },
/* 26 */
/***/ function(module, exports) {

	module.exports = require("lodash/pick");

/***/ },
/* 27 */
/***/ function(module, exports) {

	module.exports = require("lodash/every");

/***/ },
/* 28 */
/***/ function(module, exports) {

	module.exports = require("lodash/get");

/***/ },
/* 29 */
/***/ function(module, exports) {

	module.exports = require("lodash/omit");

/***/ },
/* 30 */
/***/ function(module, exports) {

	module.exports = require("lodash/find");

/***/ },
/* 31 */
/***/ function(module, exports) {

	module.exports = require("lodash/last");

/***/ },
/* 32 */
/***/ function(module, exports) {

	module.exports = require("lodash/isEmpty");

/***/ },
/* 33 */
/***/ function(module, exports) {

	module.exports = require("lodash/isNumber");

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(2);
	var rxjs_1 = __webpack_require__(35);
	var lodash_1 = __webpack_require__(5);
	var ngx_restangular_config_1 = __webpack_require__(4);
	var ngx_restangular_http_1 = __webpack_require__(36);
	var ngx_restangular_config_factory_1 = __webpack_require__(38);
	var Restangular = (function () {
	    function Restangular(configObj, injector, http) {
	        this.configObj = configObj;
	        this.injector = injector;
	        this.http = http;
	        this.provider = new providerConfig(http);
	        var element = this.provider.$get();
	        Object.assign(this, element);
	        this.setDefaultConfig();
	    }
	    Restangular.prototype.setDefaultConfig = function () {
	        var _this = this;
	        if (!this.configObj || !lodash_1.default.isFunction(this.configObj.fn)) {
	            return;
	        }
	        var arrDI = lodash_1.default.map(this.configObj.arrServices, function (services) {
	            return _this.injector.get(services);
	        });
	        (_a = this.configObj).fn.apply(_a, [this.provider].concat(arrDI));
	        var _a;
	    };
	    return Restangular;
	}());
	Restangular = __decorate([
	    core_1.Injectable(),
	    __param(0, core_1.Optional()), __param(0, core_1.Inject(ngx_restangular_config_1.RESTANGULAR)),
	    __metadata("design:paramtypes", [Object, core_1.Injector,
	        ngx_restangular_http_1.RestangularHttp])
	], Restangular);
	exports.Restangular = Restangular;
	function providerConfig($http) {
	    var globalConfiguration = {};
	    ngx_restangular_config_factory_1.RestangularConfigurer(this, globalConfiguration);
	    this.$get = $get;
	    function $get() {
	        function createServiceForConfiguration(config) {
	            var service = {};
	            var urlHandler = new config.urlCreatorFactory[config.urlCreator]();
	            urlHandler.setConfig(config);
	            function restangularizeBase(parent, elem, route, reqParams, fromServer) {
	                elem[config.restangularFields.route] = route;
	                elem[config.restangularFields.getRestangularUrl] = lodash_1.default.bind(urlHandler.fetchUrl, urlHandler, elem);
	                elem[config.restangularFields.getRequestedUrl] = lodash_1.default.bind(urlHandler.fetchRequestedUrl, urlHandler, elem);
	                elem[config.restangularFields.addRestangularMethod] = lodash_1.default.bind(addRestangularMethodFunction, elem);
	                elem[config.restangularFields.clone] = lodash_1.default.bind(copyRestangularizedElement, elem);
	                elem[config.restangularFields.reqParams] = lodash_1.default.isEmpty(reqParams) ? null : reqParams;
	                elem[config.restangularFields.withHttpConfig] = lodash_1.default.bind(withHttpConfig, elem);
	                elem[config.restangularFields.plain] = lodash_1.default.bind(stripRestangular, elem, elem);
	                // Tag element as restangularized
	                elem[config.restangularFields.restangularized] = true;
	                // RequestLess connection
	                elem[config.restangularFields.one] = lodash_1.default.bind(one, elem, elem);
	                elem[config.restangularFields.all] = lodash_1.default.bind(all, elem, elem);
	                elem[config.restangularFields.several] = lodash_1.default.bind(several, elem, elem);
	                elem[config.restangularFields.oneUrl] = lodash_1.default.bind(oneUrl, elem, elem);
	                elem[config.restangularFields.allUrl] = lodash_1.default.bind(allUrl, elem, elem);
	                elem[config.restangularFields.fromServer] = !!fromServer;
	                if (parent && config.shouldSaveParent(route)) {
	                    var parentId = config.getIdFromElem(parent);
	                    var parentUrl = config.getUrlFromElem(parent);
	                    var restangularFieldsForParent = lodash_1.default.union(lodash_1.default.values(lodash_1.default.pick(config.restangularFields, ['route', 'singleOne', 'parentResource'])), config.extraFields);
	                    var parentResource = lodash_1.default.pick(parent, restangularFieldsForParent);
	                    if (config.isValidId(parentId)) {
	                        config.setIdToElem(parentResource, parentId, route);
	                    }
	                    if (config.isValidId(parentUrl)) {
	                        config.setUrlToElem(parentResource, parentUrl, route);
	                    }
	                    elem[config.restangularFields.parentResource] = parentResource;
	                }
	                else {
	                    elem[config.restangularFields.parentResource] = null;
	                }
	                return elem;
	            }
	            function one(parent, route, id, singleOne) {
	                var error;
	                if (lodash_1.default.isNumber(route) || lodash_1.default.isNumber(parent)) {
	                    error = 'You\'re creating a Restangular entity with the number ';
	                    error += 'instead of the route or the parent. For example, you can\'t call .one(12).';
	                    throw new Error(error);
	                }
	                if (lodash_1.default.isUndefined(route)) {
	                    error = 'You\'re creating a Restangular entity either without the path. ';
	                    error += 'For example you can\'t call .one(). Please check if your arguments are valid.';
	                    throw new Error(error);
	                }
	                var elem = {};
	                config.setIdToElem(elem, id, route);
	                config.setFieldToElem(config.restangularFields.singleOne, elem, singleOne);
	                return restangularizeElem(parent, elem, route, false);
	            }
	            function all(parent, route) {
	                return restangularizeCollection(parent, [], route, false);
	            }
	            function several(parent, route /*, ids */) {
	                var collection = [];
	                collection[config.restangularFields.ids] = Array.prototype.splice.call(arguments, 2);
	                return restangularizeCollection(parent, collection, route, false);
	            }
	            function oneUrl(parent, route, url) {
	                if (!route) {
	                    throw new Error('Route is mandatory when creating new Restangular objects.');
	                }
	                var elem = {};
	                config.setUrlToElem(elem, url, route);
	                return restangularizeElem(parent, elem, route, false);
	            }
	            function allUrl(parent, route, url) {
	                if (!route) {
	                    throw new Error('Route is mandatory when creating new Restangular objects.');
	                }
	                var elem = {};
	                config.setUrlToElem(elem, url, route);
	                return restangularizeCollection(parent, elem, route, false);
	            }
	            // Promises
	            function restangularizeResponse(subject, isCollection, valueToFill) {
	                return subject.filter(function (res) { return res; });
	            }
	            function resolvePromise(subject, response, data, filledValue) {
	                lodash_1.default.extend(filledValue, data);
	                // Trigger the full response interceptor.
	                if (config.fullResponse) {
	                    subject.next(lodash_1.default.extend(response, {
	                        data: data
	                    }));
	                }
	                else {
	                    subject.next(data);
	                }
	                subject.complete();
	            }
	            // Elements
	            function stripRestangular(elem) {
	                if (lodash_1.default.isArray(elem)) {
	                    var array = [];
	                    lodash_1.default.each(elem, function (value) {
	                        array.push(config.isRestangularized(value) ? stripRestangular(value) : value);
	                    });
	                    return array;
	                }
	                else {
	                    return lodash_1.default.omit(elem, lodash_1.default.values(lodash_1.default.omit(config.restangularFields, 'id')));
	                }
	            }
	            function addCustomOperation(elem) {
	                elem[config.restangularFields.customOperation] = lodash_1.default.bind(customFunction, elem);
	                var requestMethods = { get: customFunction, delete: customFunction };
	                lodash_1.default.each(['put', 'patch', 'post'], function (name) {
	                    requestMethods[name] = function (operation, elem, path, params, headers) {
	                        return lodash_1.default.bind(customFunction, this)(operation, path, params, headers, elem);
	                    };
	                });
	                lodash_1.default.each(requestMethods, function (requestFunc, name) {
	                    var callOperation = name === 'delete' ? 'remove' : name;
	                    lodash_1.default.each(['do', 'custom'], function (alias) {
	                        elem[alias + name.toUpperCase()] = lodash_1.default.bind(requestFunc, elem, callOperation);
	                    });
	                });
	                elem[config.restangularFields.customGETLIST] = lodash_1.default.bind(fetchFunction, elem);
	                elem[config.restangularFields.doGETLIST] = elem[config.restangularFields.customGETLIST];
	            }
	            function copyRestangularizedElement(fromElement, toElement) {
	                if (toElement === void 0) { toElement = {}; }
	                var copiedElement = Object.assign(toElement, fromElement);
	                return restangularizeElem(copiedElement[config.restangularFields.parentResource], copiedElement, copiedElement[config.restangularFields.route], true);
	            }
	            function restangularizeElem(parent, element, route, fromServer, collection, reqParams) {
	                var elem = config.onBeforeElemRestangularized(element, false, route);
	                var localElem = restangularizeBase(parent, elem, route, reqParams, fromServer);
	                if (config.useCannonicalId) {
	                    localElem[config.restangularFields.cannonicalId] = config.getIdFromElem(localElem);
	                }
	                if (collection) {
	                    localElem[config.restangularFields.getParentList] = function () {
	                        return collection;
	                    };
	                }
	                localElem[config.restangularFields.restangularCollection] = false;
	                localElem[config.restangularFields.get] = lodash_1.default.bind(getFunction, localElem);
	                localElem[config.restangularFields.getList] = lodash_1.default.bind(fetchFunction, localElem);
	                localElem[config.restangularFields.put] = lodash_1.default.bind(putFunction, localElem);
	                localElem[config.restangularFields.post] = lodash_1.default.bind(postFunction, localElem);
	                localElem[config.restangularFields.remove] = lodash_1.default.bind(deleteFunction, localElem);
	                localElem[config.restangularFields.head] = lodash_1.default.bind(headFunction, localElem);
	                localElem[config.restangularFields.trace] = lodash_1.default.bind(traceFunction, localElem);
	                localElem[config.restangularFields.options] = lodash_1.default.bind(optionsFunction, localElem);
	                localElem[config.restangularFields.patch] = lodash_1.default.bind(patchFunction, localElem);
	                localElem[config.restangularFields.save] = lodash_1.default.bind(save, localElem);
	                addCustomOperation(localElem);
	                return config.transformElem(localElem, false, route, service, true);
	            }
	            function restangularizeCollection(parent, element, route, fromServer, reqParams) {
	                var elem = config.onBeforeElemRestangularized(element, true, route);
	                var localElem = restangularizeBase(parent, elem, route, reqParams, fromServer);
	                localElem[config.restangularFields.restangularCollection] = true;
	                localElem[config.restangularFields.post] = lodash_1.default.bind(postFunction, localElem, null);
	                localElem[config.restangularFields.remove] = lodash_1.default.bind(deleteFunction, localElem);
	                localElem[config.restangularFields.head] = lodash_1.default.bind(headFunction, localElem);
	                localElem[config.restangularFields.trace] = lodash_1.default.bind(traceFunction, localElem);
	                localElem[config.restangularFields.putElement] = lodash_1.default.bind(putElementFunction, localElem);
	                localElem[config.restangularFields.options] = lodash_1.default.bind(optionsFunction, localElem);
	                localElem[config.restangularFields.patch] = lodash_1.default.bind(patchFunction, localElem);
	                localElem[config.restangularFields.get] = lodash_1.default.bind(getById, localElem);
	                localElem[config.restangularFields.getList] = lodash_1.default.bind(fetchFunction, localElem, null);
	                addCustomOperation(localElem);
	                return config.transformElem(localElem, true, route, service, true);
	            }
	            function restangularizeCollectionAndElements(parent, element, route) {
	                var collection = restangularizeCollection(parent, element, route, false);
	                lodash_1.default.each(collection, function (elem) {
	                    if (elem) {
	                        restangularizeElem(parent, elem, route, false);
	                    }
	                });
	                return collection;
	            }
	            function getById(id, reqParams, headers) {
	                return this.customGET(id.toString(), reqParams, headers);
	            }
	            function putElementFunction(idx, params, headers) {
	                var __this = this;
	                var elemToPut = this[idx];
	                var subject = new rxjs_1.BehaviorSubject(null);
	                var filledArray = [];
	                filledArray = config.transformElem(filledArray, true, elemToPut[config.restangularFields.route], service);
	                elemToPut.put(params, headers)
	                    .subscribe(function (serverElem) {
	                    var newArray = copyRestangularizedElement(__this);
	                    newArray[idx] = serverElem;
	                    filledArray = newArray;
	                    subject.next(newArray);
	                }, function (response) {
	                    subject.error(response);
	                }, function () {
	                    subject.complete();
	                });
	                return restangularizeResponse(subject, true, filledArray);
	            }
	            function parseResponse(resData, operation, route, fetchUrl, response, subject) {
	                var data = config.responseExtractor(resData, operation, route, fetchUrl, response, subject);
	                var etag = response.headers.get('ETag');
	                if (data && etag) {
	                    data[config.restangularFields.etag] = etag;
	                }
	                return data;
	            }
	            function fetchFunction(what, reqParams, headers) {
	                var __this = this;
	                var subject = new rxjs_1.BehaviorSubject(null);
	                var operation = 'getList';
	                var url = urlHandler.fetchUrl(this, what);
	                var whatFetched = what || __this[config.restangularFields.route];
	                var request = config.fullRequestInterceptor(null, operation, whatFetched, url, headers || {}, reqParams || {}, this[config.restangularFields.httpConfig] || {});
	                var filledArray = [];
	                filledArray = config.transformElem(filledArray, true, whatFetched, service);
	                var method = 'getList';
	                if (config.jsonp) {
	                    method = 'jsonp';
	                }
	                var okCallback = function (response) {
	                    var resData = response.data;
	                    var fullParams = response.config.params;
	                    var data = parseResponse(resData, operation, whatFetched, url, response, subject);
	                    // support empty response for getList() calls (some APIs respond with 204 and empty body)
	                    if (lodash_1.default.isUndefined(data) || '' === data) {
	                        data = [];
	                    }
	                    if (!lodash_1.default.isArray(data)) {
	                        throw new Error('Response for getList SHOULD be an array and not an object or something else');
	                    }
	                    if (true === config.plainByDefault) {
	                        return resolvePromise(subject, response, data, filledArray);
	                    }
	                    var processedData = lodash_1.default.map(data, function (elem) {
	                        if (!__this[config.restangularFields.restangularCollection]) {
	                            return restangularizeElem(__this, elem, what, true, data);
	                        }
	                        else {
	                            return restangularizeElem(__this[config.restangularFields.parentResource], elem, __this[config.restangularFields.route], true, data);
	                        }
	                    });
	                    processedData = lodash_1.default.extend(data, processedData);
	                    if (!__this[config.restangularFields.restangularCollection]) {
	                        resolvePromise(subject, response, restangularizeCollection(__this, processedData, what, true, fullParams), filledArray);
	                    }
	                    else {
	                        resolvePromise(subject, response, restangularizeCollection(__this[config.restangularFields.parentResource], processedData, __this[config.restangularFields.route], true, fullParams), filledArray);
	                    }
	                };
	                urlHandler.resource(this, $http, request.httpConfig, request.headers, request.params, what, this[config.restangularFields.etag], operation)[method]()
	                    .subscribe(okCallback, function error(response) {
	                    if (response.status === 304 && __this[config.restangularFields.restangularCollection]) {
	                        resolvePromise(subject, response, __this, filledArray);
	                    }
	                    else if (lodash_1.default.every(config.errorInterceptors, function (cb) {
	                        return cb(response, subject, okCallback) !== false;
	                    })) {
	                        // triggered if no callback returns false
	                        subject.error(response);
	                    }
	                });
	                return restangularizeResponse(subject, true, filledArray);
	            }
	            function withHttpConfig(httpConfig) {
	                this[config.restangularFields.httpConfig] = httpConfig;
	                return this;
	            }
	            function save(params, headers) {
	                if (this[config.restangularFields.fromServer]) {
	                    return this[config.restangularFields.put](params, headers);
	                }
	                else {
	                    return lodash_1.default.bind(elemFunction, this)('post', undefined, params, undefined, headers);
	                }
	            }
	            function elemFunction(operation, what, params, obj, headers) {
	                var __this = this;
	                var subject = new rxjs_1.BehaviorSubject(null);
	                var resParams = params || {};
	                var route = what || this[config.restangularFields.route];
	                var fetchUrl = urlHandler.fetchUrl(this, what);
	                var callObj = obj || this;
	                // fallback to etag on restangular object (since for custom methods we probably don't explicitly specify the etag field)
	                var etag = callObj[config.restangularFields.etag] || (operation !== 'post' ? this[config.restangularFields.etag] : null);
	                if (lodash_1.default.isObject(callObj) && config.isRestangularized(callObj)) {
	                    callObj = stripRestangular(callObj);
	                }
	                var request = config.fullRequestInterceptor(callObj, operation, route, fetchUrl, headers || {}, resParams || {}, this[config.restangularFields.httpConfig] || {});
	                var filledObject = {};
	                filledObject = config.transformElem(filledObject, false, route, service);
	                var okCallback = function (response) {
	                    var resData = lodash_1.default.get(response, 'data');
	                    var fullParams = lodash_1.default.get(response, 'config.params');
	                    var elem = parseResponse(resData, operation, route, fetchUrl, response, subject);
	                    if (elem) {
	                        var data;
	                        if (true === config.plainByDefault) {
	                            return resolvePromise(subject, response, elem, filledObject);
	                        }
	                        if (operation === 'post' && !__this[config.restangularFields.restangularCollection]) {
	                            data = restangularizeElem(__this[config.restangularFields.parentResource], elem, route, true, null, fullParams);
	                            resolvePromise(subject, response, data, filledObject);
	                        }
	                        else {
	                            data = restangularizeElem(__this[config.restangularFields.parentResource], elem, __this[config.restangularFields.route], true, null, fullParams);
	                            data[config.restangularFields.singleOne] = __this[config.restangularFields.singleOne];
	                            resolvePromise(subject, response, data, filledObject);
	                        }
	                    }
	                    else {
	                        resolvePromise(subject, response, undefined, filledObject);
	                    }
	                };
	                var errorCallback = function (response) {
	                    if (response.status === 304 && config.isSafe(operation)) {
	                        resolvePromise(subject, response, __this, filledObject);
	                    }
	                    else if (lodash_1.default.every(config.errorInterceptors, function (cb) {
	                        return cb(response, subject, okCallback) !== false;
	                    })) {
	                        // triggered if no callback returns false
	                        subject.error(response);
	                    }
	                };
	                // Overriding HTTP Method
	                var callOperation = operation;
	                var callHeaders = lodash_1.default.extend({}, request.headers);
	                var isOverrideOperation = config.isOverridenMethod(operation);
	                if (isOverrideOperation) {
	                    callOperation = 'post';
	                    callHeaders = lodash_1.default.extend(callHeaders, { 'X-HTTP-Method-Override': operation === 'remove' ? 'DELETE' : operation.toUpperCase() });
	                }
	                else if (config.jsonp && callOperation === 'get') {
	                    callOperation = 'jsonp';
	                }
	                if (config.isSafe(operation)) {
	                    if (isOverrideOperation) {
	                        urlHandler.resource(this, $http, request.httpConfig, callHeaders, request.params, what, etag, callOperation)[callOperation]({}).subscribe(okCallback, errorCallback);
	                    }
	                    else {
	                        urlHandler.resource(this, $http, request.httpConfig, callHeaders, request.params, what, etag, callOperation)[callOperation]().subscribe(okCallback, errorCallback);
	                    }
	                }
	                else {
	                    urlHandler.resource(this, $http, request.httpConfig, callHeaders, request.params, what, etag, callOperation)[callOperation](request.element).subscribe(okCallback, errorCallback);
	                }
	                return restangularizeResponse(subject, false, filledObject);
	            }
	            function getFunction(params, headers) {
	                return lodash_1.default.bind(elemFunction, this)('get', undefined, params, undefined, headers);
	            }
	            function deleteFunction(params, headers) {
	                return lodash_1.default.bind(elemFunction, this)('remove', undefined, params, undefined, headers);
	            }
	            function putFunction(params, headers) {
	                return lodash_1.default.bind(elemFunction, this)('put', undefined, params, undefined, headers);
	            }
	            function postFunction(what, elem, params, headers) {
	                return lodash_1.default.bind(elemFunction, this)('post', what, params, elem, headers);
	            }
	            function headFunction(params, headers) {
	                return lodash_1.default.bind(elemFunction, this)('head', undefined, params, undefined, headers);
	            }
	            function traceFunction(params, headers) {
	                return lodash_1.default.bind(elemFunction, this)('trace', undefined, params, undefined, headers);
	            }
	            function optionsFunction(params, headers) {
	                return lodash_1.default.bind(elemFunction, this)('options', undefined, params, undefined, headers);
	            }
	            function patchFunction(elem, params, headers) {
	                return lodash_1.default.bind(elemFunction, this)('patch', undefined, params, elem, headers);
	            }
	            function customFunction(operation, path, params, headers, elem) {
	                return lodash_1.default.bind(elemFunction, this)(operation, path, params, elem, headers);
	            }
	            function addRestangularMethodFunction(name, operation, path, defaultParams, defaultHeaders, defaultElem) {
	                var bindedFunction;
	                if (operation === 'getList') {
	                    bindedFunction = lodash_1.default.bind(fetchFunction, this, path);
	                }
	                else {
	                    bindedFunction = lodash_1.default.bind(customFunction, this, operation, path);
	                }
	                var createdFunction = function (params, headers, elem) {
	                    var callParams = lodash_1.default.defaults({
	                        params: params,
	                        headers: headers,
	                        elem: elem
	                    }, {
	                        params: defaultParams,
	                        headers: defaultHeaders,
	                        elem: defaultElem
	                    });
	                    return bindedFunction(callParams.params, callParams.headers, callParams.elem);
	                };
	                if (config.isSafe(operation)) {
	                    this[name] = createdFunction;
	                }
	                else {
	                    this[name] = function (elem, params, headers) {
	                        return createdFunction(params, headers, elem);
	                    };
	                }
	            }
	            function withConfigurationFunction(configurer) {
	                var newConfig = lodash_1.default.clone(lodash_1.default.omit(config, 'configuration'));
	                ngx_restangular_config_factory_1.RestangularConfigurer(newConfig, newConfig);
	                configurer(newConfig);
	                return createServiceForConfiguration(newConfig);
	            }
	            function toService(route, parent) {
	                var knownCollectionMethods = lodash_1.default.values(config.restangularFields);
	                var serv = {};
	                var collection = (parent || service).all(route);
	                serv.one = lodash_1.default.bind(one, (parent || service), parent, route);
	                serv.all = lodash_1.default.bind(collection.all, collection);
	                serv.post = lodash_1.default.bind(collection.post, collection);
	                serv.getList = lodash_1.default.bind(collection.getList, collection);
	                serv.withHttpConfig = lodash_1.default.bind(collection.withHttpConfig, collection);
	                serv.get = lodash_1.default.bind(collection.get, collection);
	                for (var prop in collection) {
	                    if (collection.hasOwnProperty(prop) && lodash_1.default.isFunction(collection[prop]) && !lodash_1.default.includes(knownCollectionMethods, prop)) {
	                        serv[prop] = lodash_1.default.bind(collection[prop], collection);
	                    }
	                }
	                return serv;
	            }
	            ngx_restangular_config_factory_1.RestangularConfigurer(service, config);
	            service.copy = lodash_1.default.bind(copyRestangularizedElement, service);
	            service.service = lodash_1.default.bind(toService, service);
	            service.withConfig = lodash_1.default.bind(withConfigurationFunction, service);
	            service.one = lodash_1.default.bind(one, service, null);
	            service.all = lodash_1.default.bind(all, service, null);
	            service.several = lodash_1.default.bind(several, service, null);
	            service.oneUrl = lodash_1.default.bind(oneUrl, service, null);
	            service.allUrl = lodash_1.default.bind(allUrl, service, null);
	            service.stripRestangular = lodash_1.default.bind(stripRestangular, service);
	            service.restangularizeElement = lodash_1.default.bind(restangularizeElem, service);
	            service.restangularizeCollection = lodash_1.default.bind(restangularizeCollectionAndElements, service);
	            return service;
	        }
	        return createServiceForConfiguration(globalConfiguration);
	    }
	    ;
	}


/***/ },
/* 35 */
/***/ function(module, exports) {

	module.exports = require("rxjs");

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(2);
	var http_1 = __webpack_require__(3);
	var rxjs_1 = __webpack_require__(35);
	var ngx_restangular_helper_1 = __webpack_require__(37);
	var RestangularHttp = (function () {
	    function RestangularHttp(http) {
	        this.http = http;
	    }
	    RestangularHttp.prototype.createRequest = function (options) {
	        var requestOptions = ngx_restangular_helper_1.RestangularHelper.createRequestOptions(options);
	        var request = new http_1.Request(requestOptions);
	        return this.request(request);
	    };
	    RestangularHttp.prototype.request = function (request) {
	        var _this = this;
	        return this.http.request(request)
	            .map(function (response) {
	            response.config = { params: request };
	            return response;
	        })
	            .map(function (response) {
	            if (response._body) {
	                response.data = typeof response._body == 'string' ? JSON.parse(response._body) : response._body;
	            }
	            else {
	                response.data = null;
	            }
	            return response;
	        })
	            .catch(function (err) {
	            try {
	                err.data = typeof err._body == 'string' && err._body.length > 0 ? JSON.parse(err._body) : err._body;
	            }
	            catch (e) {
	                err.data = err._body;
	            }
	            err.request = request;
	            err.repeatRequest = function (newRequest) {
	                return _this.request(newRequest || request);
	            };
	            return rxjs_1.Observable.throw(err);
	        });
	    };
	    return RestangularHttp;
	}());
	RestangularHttp = __decorate([
	    core_1.Injectable(),
	    __metadata("design:paramtypes", [http_1.Http])
	], RestangularHttp);
	exports.RestangularHttp = RestangularHttp;


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var http_1 = __webpack_require__(3);
	var RestangularHelper = (function () {
	    function RestangularHelper() {
	    }
	    RestangularHelper.createRequestOptions = function (options) {
	        var requestQueryParams = RestangularHelper.createRequestQueryParams(options.params);
	        var requestHeaders = RestangularHelper.createRequestHeaders(options.headers);
	        var methodName = options.method.charAt(0).toUpperCase() + options.method.substr(1).toLowerCase();
	        var withCredentials = options.withCredentials || false;
	        var requestOptions = new http_1.RequestOptions({
	            method: http_1.RequestMethod[methodName],
	            headers: requestHeaders,
	            search: requestQueryParams,
	            url: options.url,
	            body: options.data,
	            withCredentials: withCredentials
	        });
	        return requestOptions;
	    };
	    RestangularHelper.createRequestQueryParams = function (queryParams) {
	        var requestQueryParams = Object.assign({}, queryParams);
	        var search = new http_1.URLSearchParams();
	        var _loop_1 = function (key) {
	            var value = requestQueryParams[key];
	            if (Array.isArray(value)) {
	                value.forEach(function (val) {
	                    search.append(key, val);
	                });
	            }
	            else {
	                if (typeof value === 'object') {
	                    value = JSON.stringify(value);
	                }
	                search.append(key, value);
	            }
	        };
	        for (var key in requestQueryParams) {
	            _loop_1(key);
	        }
	        return search;
	    };
	    RestangularHelper.createRequestHeaders = function (headers) {
	        for (var key in headers) {
	            var value = headers[key];
	            if (typeof value === 'undefined') {
	                delete headers[key];
	            }
	        }
	        return new http_1.Headers(Object.assign({}, headers));
	    };
	    return RestangularHelper;
	}());
	exports.RestangularHelper = RestangularHelper;


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var lodash_1 = __webpack_require__(5);
	//console.log(_);
	function RestangularConfigurer(object, config) {
	    object.configuration = config;
	    /**
	     * Those are HTTP safe methods for which there is no need to pass any data with the request.
	     */
	    var safeMethods = ['get', 'head', 'options', 'trace', 'getlist'];
	    config.isSafe = function (operation) {
	        return lodash_1.default.includes(safeMethods, operation.toLowerCase());
	    };
	    var absolutePattern = /^https?:\/\//i;
	    config.isAbsoluteUrl = function (string) {
	        return lodash_1.default.isUndefined(config.absoluteUrl) || lodash_1.default.isNull(config.absoluteUrl) ?
	            string && absolutePattern.test(string) :
	            config.absoluteUrl;
	    };
	    config.absoluteUrl = lodash_1.default.isUndefined(config.absoluteUrl) ? true : config.absoluteUrl;
	    object.setSelfLinkAbsoluteUrl = function (value) {
	        config.absoluteUrl = value;
	    };
	    /**
	     * This is the BaseURL to be used with Restangular
	     */
	    config.baseUrl = lodash_1.default.isUndefined(config.baseUrl) ? '' : config.baseUrl;
	    object.setBaseUrl = function (newBaseUrl) {
	        config.baseUrl = /\/$/.test(newBaseUrl) ?
	            newBaseUrl.substring(0, newBaseUrl.length - 1) :
	            newBaseUrl;
	        return this;
	    };
	    /**
	     * Sets the extra fields to keep from the parents
	     */
	    config.extraFields = config.extraFields || [];
	    object.setExtraFields = function (newExtraFields) {
	        config.extraFields = newExtraFields;
	        return this;
	    };
	    /**
	     * Some default $http parameter to be used in EVERY call
	     **/
	    config.defaultHttpFields = config.defaultHttpFields || {};
	    object.setDefaultHttpFields = function (values) {
	        config.defaultHttpFields = values;
	        return this;
	    };
	    /**
	     * Always return plain data, no restangularized object
	     **/
	    config.plainByDefault = config.plainByDefault || false;
	    object.setPlainByDefault = function (value) {
	        config.plainByDefault = value === true ? true : false;
	        return this;
	    };
	    config.withHttpValues = function (httpLocalConfig, obj) {
	        return lodash_1.default.defaults(obj, httpLocalConfig, config.defaultHttpFields);
	    };
	    config.encodeIds = lodash_1.default.isUndefined(config.encodeIds) ? true : config.encodeIds;
	    object.setEncodeIds = function (encode) {
	        config.encodeIds = encode;
	    };
	    config.defaultRequestParams = config.defaultRequestParams || {
	        get: {},
	        post: {},
	        put: {},
	        remove: {},
	        common: {}
	    };
	    object.setDefaultRequestParams = function (param1, param2) {
	        var methods = [], params = param2 || param1;
	        if (!lodash_1.default.isUndefined(param2)) {
	            if (lodash_1.default.isArray(param1)) {
	                methods = param1;
	            }
	            else {
	                methods.push(param1);
	            }
	        }
	        else {
	            methods.push('common');
	        }
	        lodash_1.default.each(methods, function (method) {
	            config.defaultRequestParams[method] = params;
	        });
	        return this;
	    };
	    object.requestParams = config.defaultRequestParams;
	    config.defaultHeaders = config.defaultHeaders || {};
	    object.setDefaultHeaders = function (headers) {
	        config.defaultHeaders = headers;
	        object.defaultHeaders = config.defaultHeaders;
	        return this;
	    };
	    object.defaultHeaders = config.defaultHeaders;
	    /**
	     * Method overriders response Method
	     **/
	    config.defaultResponseMethod = config.defaultResponseMethod || 'promise';
	    object.setDefaultResponseMethod = function (method) {
	        config.defaultResponseMethod = method;
	        object.defaultResponseMethod = config.defaultResponseMethod;
	        return this;
	    };
	    object.defaultResponseMethod = config.defaultResponseMethod;
	    /**
	     * Method overriders will set which methods are sent via POST with an X-HTTP-Method-Override
	     **/
	    config.methodOverriders = config.methodOverriders || [];
	    object.setMethodOverriders = function (values) {
	        var overriders = lodash_1.default.extend([], values);
	        if (config.isOverridenMethod('delete', overriders)) {
	            overriders.push('remove');
	        }
	        config.methodOverriders = overriders;
	        return this;
	    };
	    config.jsonp = lodash_1.default.isUndefined(config.jsonp) ? false : config.jsonp;
	    object.setJsonp = function (active) {
	        config.jsonp = active;
	    };
	    config.isOverridenMethod = function (method, values) {
	        var search = values || config.methodOverriders;
	        return !lodash_1.default.isUndefined(lodash_1.default.find(search, function (one) {
	            return one.toLowerCase() === method.toLowerCase();
	        }));
	    };
	    /**
	     * Sets the URL creator type. For now, only Path is created. In the future we'll have queryParams
	     **/
	    config.urlCreator = config.urlCreator || 'path';
	    object.setUrlCreator = function (name) {
	        if (!lodash_1.default.has(config.urlCreatorFactory, name)) {
	            throw new Error('URL Path selected isn\'t valid');
	        }
	        config.urlCreator = name;
	        return this;
	    };
	    /**
	     * You can set the restangular fields here. The 3 required fields for Restangular are:
	     *
	     * id: Id of the element
	     * route: name of the route of this element
	     * parentResource: the reference to the parent resource
	     *
	     *  All of this fields except for id, are handled (and created) by Restangular. By default,
	     *  the field values will be id, route and parentResource respectively
	     */
	    config.restangularFields = config.restangularFields || {
	        id: 'id',
	        route: 'route',
	        parentResource: 'parentResource',
	        restangularCollection: 'restangularCollection',
	        cannonicalId: '__cannonicalId',
	        etag: 'restangularEtag',
	        selfLink: 'href',
	        get: 'get',
	        getList: 'getList',
	        put: 'put',
	        post: 'post',
	        remove: 'remove',
	        head: 'head',
	        trace: 'trace',
	        options: 'options',
	        patch: 'patch',
	        getRestangularUrl: 'getRestangularUrl',
	        getRequestedUrl: 'getRequestedUrl',
	        putElement: 'putElement',
	        addRestangularMethod: 'addRestangularMethod',
	        getParentList: 'getParentList',
	        clone: 'clone',
	        ids: 'ids',
	        httpConfig: '_$httpConfig',
	        reqParams: 'reqParams',
	        one: 'one',
	        all: 'all',
	        several: 'several',
	        oneUrl: 'oneUrl',
	        allUrl: 'allUrl',
	        customPUT: 'customPUT',
	        customPATCH: 'customPATCH',
	        customPOST: 'customPOST',
	        customDELETE: 'customDELETE',
	        customGET: 'customGET',
	        customGETLIST: 'customGETLIST',
	        customOperation: 'customOperation',
	        doPUT: 'doPUT',
	        doPATCH: 'doPATCH',
	        doPOST: 'doPOST',
	        doDELETE: 'doDELETE',
	        doGET: 'doGET',
	        doGETLIST: 'doGETLIST',
	        fromServer: 'fromServer',
	        withConfig: 'withConfig',
	        withHttpConfig: 'withHttpConfig',
	        singleOne: 'singleOne',
	        plain: 'plain',
	        save: 'save',
	        restangularized: 'restangularized'
	    };
	    object.setRestangularFields = function (resFields) {
	        config.restangularFields =
	            lodash_1.default.extend({}, config.restangularFields, resFields);
	        return this;
	    };
	    config.isRestangularized = function (obj) {
	        return !!obj[config.restangularFields.restangularized];
	    };
	    config.setFieldToElem = function (field, elem, value) {
	        var properties = field.split('.');
	        var idValue = elem;
	        lodash_1.default.each(lodash_1.default.initial(properties), function (prop) {
	            idValue[prop] = {};
	            idValue = idValue[prop];
	        });
	        var index = lodash_1.default.last(properties);
	        idValue[index] = value;
	        return this;
	    };
	    config.getFieldFromElem = function (field, elem) {
	        var properties = field.split('.');
	        var idValue = elem;
	        lodash_1.default.each(properties, function (prop) {
	            if (idValue) {
	                idValue = idValue[prop];
	            }
	        });
	        return lodash_1.default.clone(idValue);
	    };
	    config.setIdToElem = function (elem, id /*, route */) {
	        config.setFieldToElem(config.restangularFields.id, elem, id);
	        return this;
	    };
	    config.getIdFromElem = function (elem) {
	        return config.getFieldFromElem(config.restangularFields.id, elem);
	    };
	    config.isValidId = function (elemId) {
	        return '' !== elemId && !lodash_1.default.isUndefined(elemId) && !lodash_1.default.isNull(elemId);
	    };
	    config.setUrlToElem = function (elem, url /*, route */) {
	        config.setFieldToElem(config.restangularFields.selfLink, elem, url);
	        return this;
	    };
	    config.getUrlFromElem = function (elem) {
	        return config.getFieldFromElem(config.restangularFields.selfLink, elem);
	    };
	    config.useCannonicalId = lodash_1.default.isUndefined(config.useCannonicalId) ? false : config.useCannonicalId;
	    object.setUseCannonicalId = function (value) {
	        config.useCannonicalId = value;
	        return this;
	    };
	    config.getCannonicalIdFromElem = function (elem) {
	        var cannonicalId = elem[config.restangularFields.cannonicalId];
	        var actualId = config.isValidId(cannonicalId) ? cannonicalId : config.getIdFromElem(elem);
	        return actualId;
	    };
	    /**
	     * Sets the Response parser. This is used in case your response isn't directly the data.
	     * For example if you have a response like {meta: {'meta'}, data: {name: 'Gonto'}}
	     * you can extract this data which is the one that needs wrapping
	     *
	     * The ResponseExtractor is a function that receives the response and the method executed.
	     */
	    config.responseInterceptors = config.responseInterceptors || [];
	    config.defaultResponseInterceptor = function (data /*, operation, what, url, response, subject */) {
	        return data || {};
	    };
	    config.responseExtractor = function (data, operation, what, url, response, subject) {
	        var interceptors = lodash_1.default.clone(config.responseInterceptors);
	        interceptors.push(config.defaultResponseInterceptor);
	        var theData = data;
	        lodash_1.default.each(interceptors, function (interceptor) {
	            theData = interceptor(theData, operation, what, url, response, subject);
	        });
	        return theData;
	    };
	    object.addResponseInterceptor = function (extractor) {
	        config.responseInterceptors.push(extractor);
	        return this;
	    };
	    config.errorInterceptors = config.errorInterceptors || [];
	    object.addErrorInterceptor = function (interceptor) {
	        config.errorInterceptors = [interceptor].concat(config.errorInterceptors);
	        return this;
	    };
	    object.setResponseInterceptor = object.addResponseInterceptor;
	    object.setResponseExtractor = object.addResponseInterceptor;
	    object.setErrorInterceptor = object.addErrorInterceptor;
	    /**
	     * Response interceptor is called just before resolving promises.
	     */
	    /**
	     * Request interceptor is called before sending an object to the server.
	     */
	    config.requestInterceptors = config.requestInterceptors || [];
	    config.defaultInterceptor = function (element, operation, path, url, headers, params, httpConfig) {
	        return {
	            element: element,
	            headers: headers,
	            params: params,
	            httpConfig: httpConfig
	        };
	    };
	    config.fullRequestInterceptor = function (element, operation, path, url, headers, params, httpConfig) {
	        var interceptors = lodash_1.default.clone(config.requestInterceptors);
	        var defaultRequest = config.defaultInterceptor(element, operation, path, url, headers, params, httpConfig);
	        return lodash_1.default.reduce(interceptors, function (request, interceptor) {
	            var returnInterceptor = interceptor(request.element, operation, path, url, request.headers, request.params, request.httpConfig);
	            return lodash_1.default.extend(request, returnInterceptor);
	        }, defaultRequest);
	    };
	    object.addRequestInterceptor = function (interceptor) {
	        config.requestInterceptors.push(function (elem, operation, path, url, headers, params, httpConfig) {
	            return {
	                headers: headers,
	                params: params,
	                element: interceptor(elem, operation, path, url),
	                httpConfig: httpConfig
	            };
	        });
	        return this;
	    };
	    object.setRequestInterceptor = object.addRequestInterceptor;
	    object.addFullRequestInterceptor = function (interceptor) {
	        config.requestInterceptors.push(interceptor);
	        return this;
	    };
	    object.setFullRequestInterceptor = object.addFullRequestInterceptor;
	    config.onBeforeElemRestangularized = config.onBeforeElemRestangularized || function (elem) {
	        return elem;
	    };
	    object.setOnBeforeElemRestangularized = function (post) {
	        config.onBeforeElemRestangularized = post;
	        return this;
	    };
	    object.setRestangularizePromiseInterceptor = function (interceptor) {
	        config.restangularizePromiseInterceptor = interceptor;
	        return this;
	    };
	    /**
	     * This method is called after an element has been "Restangularized".
	     *
	     * It receives the element, a boolean indicating if it's an element or a collection
	     * and the name of the model
	     *
	     */
	    config.onElemRestangularized = config.onElemRestangularized || function (elem) {
	        return elem;
	    };
	    object.setOnElemRestangularized = function (post) {
	        config.onElemRestangularized = post;
	        return this;
	    };
	    config.shouldSaveParent = config.shouldSaveParent || function () {
	        return true;
	    };
	    object.setParentless = function (values) {
	        if (lodash_1.default.isArray(values)) {
	            config.shouldSaveParent = function (route) {
	                return !lodash_1.default.includes(values, route);
	            };
	        }
	        else if (lodash_1.default.isBoolean(values)) {
	            config.shouldSaveParent = function () {
	                return !values;
	            };
	        }
	        return this;
	    };
	    /**
	     * This lets you set a suffix to every request.
	     *
	     * For example, if your api requires that for JSon requests you do /users/123.json, you can set that
	     * in here.
	     *
	     *
	     * By default, the suffix is null
	     */
	    config.suffix = lodash_1.default.isUndefined(config.suffix) ? null : config.suffix;
	    object.setRequestSuffix = function (newSuffix) {
	        config.suffix = newSuffix;
	        return this;
	    };
	    /**
	     * Add element transformers for certain routes.
	     */
	    config.transformers = config.transformers || {};
	    object.addElementTransformer = function (type, secondArg, thirdArg) {
	        var isCollection = null;
	        var transformer = null;
	        if (arguments.length === 2) {
	            transformer = secondArg;
	        }
	        else {
	            transformer = thirdArg;
	            isCollection = secondArg;
	        }
	        var typeTransformers = config.transformers[type];
	        if (!typeTransformers) {
	            typeTransformers = config.transformers[type] = [];
	        }
	        typeTransformers.push(function (coll, elem) {
	            if (lodash_1.default.isNull(isCollection) || (coll === isCollection)) {
	                return transformer(elem);
	            }
	            return elem;
	        });
	        return object;
	    };
	    object.extendCollection = function (route, fn) {
	        return object.addElementTransformer(route, true, fn);
	    };
	    object.extendModel = function (route, fn) {
	        return object.addElementTransformer(route, false, fn);
	    };
	    config.transformElem = function (elem, isCollection, route, Restangular, force) {
	        if (!force && !config.transformLocalElements && !elem[config.restangularFields.fromServer]) {
	            return elem;
	        }
	        var typeTransformers = config.transformers[route];
	        var changedElem = elem;
	        if (typeTransformers) {
	            lodash_1.default.each(typeTransformers, function (transformer) {
	                changedElem = transformer(isCollection, changedElem);
	            });
	        }
	        return config.onElemRestangularized(changedElem, isCollection, route, Restangular);
	    };
	    config.transformLocalElements = lodash_1.default.isUndefined(config.transformLocalElements) ?
	        false :
	        config.transformLocalElements;
	    object.setTransformOnlyServerElements = function (active) {
	        config.transformLocalElements = !active;
	    };
	    config.fullResponse = lodash_1.default.isUndefined(config.fullResponse) ? false : config.fullResponse;
	    object.setFullResponse = function (full) {
	        config.fullResponse = full;
	        return this;
	    };
	    //Internal values and functions
	    config.urlCreatorFactory = {};
	    /**
	     * Base URL Creator. Base prototype for everything related to it
	     **/
	    var BaseCreator = function () {
	    };
	    BaseCreator.prototype.setConfig = function (config) {
	        this.config = config;
	        return this;
	    };
	    BaseCreator.prototype.parentsArray = function (current) {
	        var parents = [];
	        while (current) {
	            parents.push(current);
	            current = current[this.config.restangularFields.parentResource];
	        }
	        return parents.reverse();
	    };
	    function RestangularResource(config, $http, url, configurer) {
	        var resource = {};
	        lodash_1.default.each(lodash_1.default.keys(configurer), function (key) {
	            var value = configurer[key];
	            // Add default parameters
	            value.params = lodash_1.default.extend({}, value.params, config.defaultRequestParams[value.method.toLowerCase()]);
	            // We don't want the ? if no params are there
	            if (lodash_1.default.isEmpty(value.params)) {
	                delete value.params;
	            }
	            if (config.isSafe(value.method)) {
	                resource[key] = function () {
	                    var config = lodash_1.default.extend(value, {
	                        url: url
	                    });
	                    return $http.createRequest(config);
	                };
	            }
	            else {
	                resource[key] = function (data) {
	                    var config = lodash_1.default.extend(value, {
	                        url: url,
	                        data: data
	                    });
	                    return $http.createRequest(config);
	                };
	            }
	        });
	        return resource;
	    }
	    BaseCreator.prototype.resource = function (current, $http, localHttpConfig, callHeaders, callParams, what, etag, operation) {
	        var params = lodash_1.default.defaults(callParams || {}, this.config.defaultRequestParams.common);
	        var headers = lodash_1.default.defaults(callHeaders || {}, this.config.defaultHeaders);
	        if (etag) {
	            if (!config.isSafe(operation)) {
	                headers['If-Match'] = etag;
	            }
	            else {
	                headers['If-None-Match'] = etag;
	            }
	        }
	        var url = this.base(current);
	        if (what) {
	            var add = '';
	            if (!/\/$/.test(url)) {
	                add += '/';
	            }
	            add += what;
	            url += add;
	        }
	        if (this.config.suffix &&
	            url.indexOf(this.config.suffix, url.length - this.config.suffix.length) === -1 && !this.config.getUrlFromElem(current)) {
	            url += this.config.suffix;
	        }
	        current[this.config.restangularFields.httpConfig] = undefined;
	        return RestangularResource(this.config, $http, url, {
	            getList: this.config.withHttpValues(localHttpConfig, {
	                method: 'GET',
	                params: params,
	                headers: headers
	            }),
	            get: this.config.withHttpValues(localHttpConfig, {
	                method: 'GET',
	                params: params,
	                headers: headers
	            }),
	            jsonp: this.config.withHttpValues(localHttpConfig, {
	                method: 'jsonp',
	                params: params,
	                headers: headers
	            }),
	            put: this.config.withHttpValues(localHttpConfig, {
	                method: 'PUT',
	                params: params,
	                headers: headers
	            }),
	            post: this.config.withHttpValues(localHttpConfig, {
	                method: 'POST',
	                params: params,
	                headers: headers
	            }),
	            remove: this.config.withHttpValues(localHttpConfig, {
	                method: 'DELETE',
	                params: params,
	                headers: headers
	            }),
	            head: this.config.withHttpValues(localHttpConfig, {
	                method: 'HEAD',
	                params: params,
	                headers: headers
	            }),
	            trace: this.config.withHttpValues(localHttpConfig, {
	                method: 'TRACE',
	                params: params,
	                headers: headers
	            }),
	            options: this.config.withHttpValues(localHttpConfig, {
	                method: 'OPTIONS',
	                params: params,
	                headers: headers
	            }),
	            patch: this.config.withHttpValues(localHttpConfig, {
	                method: 'PATCH',
	                params: params,
	                headers: headers
	            })
	        });
	    };
	    /**
	     * This is the Path URL creator. It uses Path to show Hierarchy in the Rest API.
	     * This means that if you have an Account that then has a set of Buildings, a URL to a building
	     * would be /accounts/123/buildings/456
	     **/
	    var Path = function () {
	    };
	    Path.prototype = new BaseCreator();
	    Path.prototype.normalizeUrl = function (url) {
	        var parts = /((?:http[s]?:)?\/\/)?(.*)?/.exec(url);
	        parts[2] = parts[2].replace(/[\\\/]+/g, '/');
	        return (typeof parts[1] !== 'undefined') ? parts[1] + parts[2] : parts[2];
	    };
	    Path.prototype.base = function (current) {
	        var __this = this;
	        return lodash_1.default.reduce(this.parentsArray(current), function (acum, elem) {
	            var elemUrl;
	            var elemSelfLink = __this.config.getUrlFromElem(elem);
	            if (elemSelfLink) {
	                if (__this.config.isAbsoluteUrl(elemSelfLink)) {
	                    return elemSelfLink;
	                }
	                else {
	                    elemUrl = elemSelfLink;
	                }
	            }
	            else {
	                elemUrl = elem[__this.config.restangularFields.route];
	                if (elem[__this.config.restangularFields.restangularCollection]) {
	                    var ids = elem[__this.config.restangularFields.ids];
	                    if (ids) {
	                        elemUrl += '/' + ids.join(',');
	                    }
	                }
	                else {
	                    var elemId;
	                    if (__this.config.useCannonicalId) {
	                        elemId = __this.config.getCannonicalIdFromElem(elem);
	                    }
	                    else {
	                        elemId = __this.config.getIdFromElem(elem);
	                    }
	                    if (config.isValidId(elemId) && !elem.singleOne) {
	                        elemUrl += '/' + (__this.config.encodeIds ? encodeURIComponent(elemId) : elemId);
	                    }
	                }
	            }
	            acum = acum.replace(/\/$/, '') + '/' + elemUrl;
	            return __this.normalizeUrl(acum);
	        }, this.config.baseUrl);
	    };
	    Path.prototype.fetchUrl = function (current, what) {
	        var baseUrl = this.base(current);
	        if (what) {
	            baseUrl += '/' + what;
	        }
	        return baseUrl;
	    };
	    Path.prototype.fetchRequestedUrl = function (current, what) {
	        var url = this.fetchUrl(current, what);
	        var params = current[config.restangularFields.reqParams];
	        // From here on and until the end of fetchRequestedUrl,
	        // the code has been kindly borrowed from angular.js
	        // The reason for such code bloating is coherence:
	        //   If the user were to use this for cache management, the
	        //   serialization of parameters would need to be identical
	        //   to the one done by angular for cache keys to match.
	        function sortedKeys(obj) {
	            var keys = [];
	            for (var key in obj) {
	                if (obj.hasOwnProperty(key)) {
	                    keys.push(key);
	                }
	            }
	            return keys.sort();
	        }
	        function forEachSorted(obj, iterator, context) {
	            var keys = sortedKeys(obj);
	            for (var i = 0; i < keys.length; i++) {
	                iterator.call(context, obj[keys[i]], keys[i]);
	            }
	            return keys;
	        }
	        function encodeUriQuery(val, pctEncodeSpaces) {
	            return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
	        }
	        if (!params) {
	            return url + (this.config.suffix || '');
	        }
	        var parts = [];
	        forEachSorted(params, function (value, key) {
	            if (value === null || value === undefined) {
	                return;
	            }
	            if (!lodash_1.default.isArray(value)) {
	                value = [value];
	            }
	            lodash_1.default.forEach(value, function (v) {
	                if (lodash_1.default.isObject(v)) {
	                    v = JSON.stringify(v);
	                }
	                parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(v));
	            });
	        });
	        return url + (this.config.suffix || '') + ((url.indexOf('?') === -1) ? '?' : '&') + parts.join('&');
	    };
	    config.urlCreatorFactory.path = Path;
	}
	exports.RestangularConfigurer = RestangularConfigurer;


/***/ }
/******/ ])
});
;
//# sourceMappingURL=ngx-restangular.js.map