{"version":3,"sources":["../../../src/ngx-restangular-http.ts"],"names":[],"mappings":";;AAAA,sCAAyC;AACzC,sCAA4C;AAC5C,6BAAgC;AAEhC,mEAA2D;AAI3D;IAEE,yBAAmB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;IAC7B,CAAC;IAED,uCAAa,GAAb,UAAc,OAAO;QACnB,IAAI,cAAc,GAAG,0CAAiB,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QACrE,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,cAAc,CAAC,CAAC;QAE1C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IAED,iCAAO,GAAP,UAAQ,OAAO;QAAf,iBA4BC;QA3BC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;aAChC,GAAG,CAAC,UAAC,QAAa;YACjB,QAAQ,CAAC,MAAM,GAAG,EAAC,MAAM,EAAE,OAAO,EAAC,CAAC;YACpC,MAAM,CAAC,QAAQ,CAAC;QAClB,CAAC,CAAC;aACD,GAAG,CAAC,UAAC,QAAa;YACjB,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnB,QAAQ,CAAC,IAAI,GAAG,OAAO,QAAQ,CAAC,KAAK,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC;YAClG,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAA;YACtB,CAAC;YACD,MAAM,CAAC,QAAQ,CAAC;QAClB,CAAC,CAAC;aACD,KAAK,CAAC,UAAA,GAAG;YACR,IAAI,CAAC;gBACH,GAAG,CAAC,IAAI,GAAG,OAAO,GAAG,CAAC,KAAK,IAAI,QAAQ,IAAI,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC;YACtG,CAAC;YAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACX,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC;YACvB,CAAC;YAED,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC;YACtB,GAAG,CAAC,aAAa,GAAG,UAAC,UAAW;gBAC9B,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,CAAC;YAC7C,CAAC,CAAC;YAEF,MAAM,CAAC,iBAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAA;IACJ,CAAC;IAQH,sBAAC;AAAD,CAhDA,AAgDC;AAPM,0BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,8BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,WAAI,GAAG;CACb,EAF6F,CAE7F,CAAC;AA/CW,0CAAe","file":"ngx-restangular-http.js","sourceRoot":"","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Http, Request} from '@angular/http';\nimport {Observable} from 'rxjs';\n\nimport {RestangularHelper} from './ngx-restangular-helper';\n\n\n\nexport class RestangularHttp {\n  \n  constructor(public http: Http) {\n  }\n  \n  createRequest(options) {\n    let requestOptions = RestangularHelper.createRequestOptions(options);\n    let request = new Request(requestOptions);\n    \n    return this.request(request);\n  }\n  \n  request(request) {\n    return this.http.request(request)\n    .map((response: any) => {\n      response.config = {params: request};\n      return response;\n    })\n    .map((response: any) => {\n      if (response._body) {\n        response.data = typeof response._body == 'string' ? JSON.parse(response._body) : response._body;\n      } else {\n        response.data = null\n      }\n      return response;\n    })\n    .catch(err => {\n      try {\n        err.data = typeof err._body == 'string' && err._body.length > 0 ? JSON.parse(err._body) : err._body;\n      } catch (e) {\n        err.data = err._body;\n      }\n      \n      err.request = request;\n      err.repeatRequest = (newRequest?) => {\n        return this.request(newRequest || request);\n      };\n      \n      return Observable.throw(err);\n    })\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}